import asyncio
from aiogram import Bot, Dispatcher
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart

from aiogram.client.default import DefaultBotProperties
import logging

BOT_TOKEN = "8085459493:AAGXpuo_zga_PvJ0tBs7cRmzvg0ABaAOTYc"

logging.basicConfig(level=logging.INFO)

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

dp = Dispatcher()


# üéõ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üç¶ –ú–æ—Ä–æ–∂–µ–Ω–æ–µ"),
            KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞"),
        ],
        [
            KeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å"),
            KeyboardButton(text="üïì –ó–∞–∫–∞–∑—ã"),
        ],
    ],
    resize_keyboard=True
)

# üîò –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@dp.message(lambda message: message.text == "/start")
async def start_handler(message: Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-–º–∞–≥–∞–∑–∏–Ω –º–æ—Ä–æ–∂–µ–Ω–æ–≥–æ! üç®\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=main_kb
    )
    

# üõí –ö–æ—Ä–∑–∏–Ω–∞
cart = {}



# üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
ice_cream_list = [
    {"name": "–í–∞–Ω–∏–ª—å–Ω–æ–µ", "id": "vanilla"},
    {"name": "–®–æ–∫–æ–ª–∞–¥–Ω–æ–µ", "id": "chocolate"},
    {"name": "–ö–ª—É–±–Ω–∏—á–Ω–æ–µ", "id": "strawberry"},
]
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üç¶ –ú–æ—Ä–æ–∂–µ–Ω–æ–µ"
@dp.message(lambda message: message.text == "üç¶ –ú–æ—Ä–æ–∂–µ–Ω–æ–µ")
async def show_ice_cream(message: Message):
    for item in ice_cream_list:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_{item['id']}")]
        ])
        await message.answer(f"<b>{item['name']}</b>", reply_markup=keyboard)


@dp.message(CommandStart())
async def cmd_start(message: Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="üç¶ –ú–æ—Ä–æ–∂–µ–Ω–æ–µ")],
        [KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")],
    ])
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    
@dp.callback_query(lambda callback: callback.data.startswith("add_"))
async def add_to_cart(callback: CallbackQuery):
    ice_cream_id = callback.data.replace("add_", "")
    name = next((i["name"] for i in ice_cream_list if i["id"] == ice_cream_id), None)
    
    user_id = callback.from_user.id
    cart.setdefault(user_id, []).append(name)
    
    await callback.answer(f"‚úÖ {name} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!")



# üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –ø–æ Inline-–∫–Ω–æ–ø–∫–∞–º

@dp.message(lambda message: message.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: Message):
    user_id = message.from_user.id
    items = cart.get(user_id, [])
    if items:
        text = "\n".join(f"‚Ä¢ {item}" for item in items)
        await message.answer(f"üß∫ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n{text}")
    else:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")



@dp.message(lambda message: message.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
async def about_handler(message: Message):
    await message.answer("–ú—ã –¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ª—É—á—à–µ–µ –º–æ—Ä–æ–∂–µ–Ω–æ–µ –≤ –≥–æ—Ä–æ–¥–µ —Å 2020 –≥–æ–¥–∞! üçß")

@dp.message(lambda message: message.text == "üïì –ó–∞–∫–∞–∑—ã")
async def orders_handler(message: Message):
    await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
